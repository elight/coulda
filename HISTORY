0.1.0
-----
Initial release with basic features to generate tests from internal DSL

0.1.1
-----
Corrections for github gem build process

0.1.2 && 0.1.3
--------------
Cleanup

0.2.0
-----
- Fixed issue 1 which prevented "extract method" on calls to Given/When/Then
  - Refactored Feature and Scenario accordingly assigning more responsibility to Feature
- No longer enforcing order/presence of Given/When/Then within Scenarios

0.3.0
-----
- Adds coulda:print_features task, providing plain text output in a 
  form similar to Cucumber's Gherkin
- Added hooks for Devver's continuous integration API

0.3.1
-----
- Minor refactorings
- Added more examples
- Adds "And" support to Given, When, and Then

0.4.0
-----
- Complete internal redesign/rewrite
- Feature method now accepts a :testcase_class => Class argument specifying the subclass of Test::Unit::TestCase,
  allowing for simple integration with other Test::Unit frameworks

0.4.1
-----
- Modified to use 'pending' instead of 'jeremymcanally-pending' from github (after I removed the 'bones' gem 
  dependency from 'pending')

0.4.2
-----
- Moved 'vendored' files under coulda and added them to the gemspec (woops)

0.4.3
-----
- Put missing rake task in the gemspec
- Added examples that were previously in the git repo but not in the gemspec

0.4.4
-----
- Reversed decision on naming "feature" files as _feature.rb.  Should just be _test.rb like any other test
- Features now register with a World when they are created which is used in the rake task instead of ObjectSpace.each_object

0.4.5
-----
- No longer requires rubygems for Ruby 1.9.1

0.4.6
-----
- Fixed issue where Scenario implementations were not delegating unresolved method calls to the wrapped test.  Should allow for usage of tools such as Webrat

0.4.7
-----
- Aded a newline after a Feature has been printed via the coulda:print_features task

0.5.0
-----
- Coulda::Features created from the Kernel::Feature method now create and return a subclass of Test::Unit::TestCase (or a subclass of the specified :testcase_class).
- The block passed to Kernel::Feature changes self to be the Test::Unit::TestCase subclass.  That way, it's virtually identical to a "class Foo < Test::Unit::TestCase"
- Removed dependency on Jeremy McAnally's "pending" gem in favor of an implementation targetted specifically to Coulda's needs (File names and line numbers of the Given/When/Then/And that is unimplemented)

0.5.1
-----
- Adds support for call-by-name/symbol (i.e., "Given :some_method invokes the 'some_method' method")
- Mocked pending within test Scenarios so that the test suite passes instead of incorrectly reporting pending tests

0.5.2
-----
- coulda:print_features now requires 'coulda' (duh)

0.5.3
-----
- coulda:print_features better indicates which scenarios and which steps are pending

0.5.4
-----
- Actually removing dependency from Jeremy McAnally's "pending" from the gemspec (woops)

0.5.5
-----
- Adds Coulda#default_testcase_class and mutator to set a single testcase_class instead of Test::Unit::TestCase

0.6.1
-----
- Requiring coulda automatcally loads coulda/tasks.  No longer need to require 'coulda/tasks' to get the Rake task in your Rails app.

0.6.2
-----
- Updated call method by name to use class methods so that they, and "macros", may universally be imported via 'extends SomeModule'

0.6.3
-----
- Renamed #pending to #coulda_pending to avoid conflicts with Rails 3
- Failing test in this release as I stupidly began working on some new features in the master branch.  Don't use the new features (they're not documented outside of the new tests) and you'll be fine. ;-)
